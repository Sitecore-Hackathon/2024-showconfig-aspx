---
ID: "86efe78b-5002-4dc7-b3db-52b1e305facc"
Parent: "2658a004-9cbf-4515-94a6-9d06742652db"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: /sitecore/system/Modules/PowerShell/Script Library/SPE/SitecoreAI/CodeGen Assistant/Content Editor/Context Menu/Generate Typescript Code
SharedFields:
- ID: "1c76313e-3c8c-4807-a826-135d10c39299"
  Hint: ShowRule
  Value: |
    <ruleset>
      <rule
        uid="{5F27BB9D-E0A3-42C5-B3EF-5D7733D5BA81}">
        <conditions>
          <condition
            id="{5DE6D53E-EA62-4D17-8BDD-FEBCD80AC07B}"
            uid="F2D74D458FCD4541873BB42C224BC5B7"
            templateid="{04646A89-996F-4EE7-878A-FFDBF1F0EF0D}" />
        </conditions>
      </rule>
    </ruleset>
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    $rendering = Get-Item .
    $parameterTemplateField = 'Parameters Template'
    $datasourceTemplateField = 'Datasource Template'
    $googleApiKey = '<Google_API_Key>'
    
    function GetAllCustomFields {
    	param(
    		[object]$Item
    	)
    
    	$allfields = ([Sitecore.Data.Items.TemplateItem]$Item).Fields
    	# filter out standard fields
    	$customFields = $allfields | Where-Object { $_.Key -notlike '__**' }
    
    	return $customFields
    }
    
    function GetCommaSeparatedFields {
    	param(
    		[object]$Fields
    	)
    	$fieldsDataArray = New-Object collections.generic.list[object]
    	foreach ($field in $Fields) {
    		$fieldsDataArray.Add("$($field.Name) as $($field.Type)")
    	}
    
    	return $fieldsDataArray -join ","
    }
    
    function DisplayDialog {
    	param(
    		[string]$Message
    	)
    
    	Read-Variable -Parameters `
     		@{ Name = "TSX Code"; value = $Message; lines = 37; Tab = "$($rendering.Name).tsx"; } `
     		-Description "Below is the code snippet you can use to incorporate the $($rendering.Name) component into your Next.js JSS project." `
     		-Title "Sitecore JSON Rendering TypeScript Generator" -Width 750 -Height 750 -OkButtonName "Exit"
    }
    
    function GetItemByPath {
    	param(
    		[string]$ItemPath,
    		[string]$Database = 'master'
    	)
    	return Get-Item -Path "$($database):\$($itemPath.ToLower().replace("/","\").Trim())"
    }
    
    # Function to get the template from which a field is inherited
    function GetInheritedTemplate ($fieldName,$template) {
    	$fieldItem = Get-Item -Path "master:" -Query "/sitecore/templates//*[@@templateid='$($template.ID)']/*[@@fieldname='$fieldName']"
    	if ($fieldItem -ne $null) {
    		$inheritedTemplate = $fieldItem."__Source".Split('|')[-1]
    		$inheritedTemplateItem = Get-Item -Path "master:" -Id $inheritedTemplate
    		if ($inheritedTemplateItem -ne $null) {
    			return $inheritedTemplateItem.Name
    		}
    	}
    	return ""
    }
    
    function GetAIRepsonse {
    	param(
    		[string]$FieldsPrompt
    	)
    
    	$apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=$($googleApiKey)"
    
    	$prompt = @" 
    create a typescript react sitecore nextjs component named '$($rendering.Name)' based on a sitecore rendering which has fields:- $($FieldsPrompt). Keep casing for 'field names' variables as provided in the prompt. Use the below code as a sample, remove the unwanted comments while generating a new file. Ignore wrapping the react component in backticks \\n`\\nimport {\\n  Image as JssImage,\\n  Link as JssLink,\\n  RichText as JssRichText,\\n  Field,\\n  ImageField,\\n  LinkField,\\n} from '@sitecore-jss/sitecore-jss-nextjs';\\nimport React from 'react';\\n//alias Image as JssImage, Link as JssLink, RichText as JssRichText\\n//above components are imported from '@sitecore-jss/sitecore-jss-nextjs'\\n\\n//define an interface for the Fields in the rendering\\n/* \\n    for Image use ImageField,\\n    for Link use LinkField,\\n    for boolean values use Field<string>,\\n    for all others se Field<string>,\\n*/\\n//example\\ninterface Fields {\\n  Image: ImageField;\\n  Body: Field<string>;\\n  CTALink: LinkField;\\n  CheckBox: Field<string>;\\n}\\n\\n//define a type for the RenderingProps\\ntype RenderingProps = {\\n  params: { [key: string]: string };\\n  fields: Fields;\\n};\\n\\n//define a fallback component which will be return when do fields are found\\nconst RenderingDefaultComponent = (props: RenderingProps): JSX.Element => (\\n  <div className={component ${props.params.styles}}>\\n    <div className=\component-content\>\\n      <span className=\is-empty-hint\>No data found!</span>\\n    </div>\\n  </div>\\n);\\n\\n//define components based on the name of Headless Rendering Variant. The default variant name is \Default\\\nexport const Default = (props: RenderingProps): JSX.Element => {\\n  const id = props.params.RenderingIdentifier;\\n  if (props.fields) {\\n    return (\\n      <div className={component ${props.params.styles}} id={id ? id : undefined}>\\n        <div className=\component-content row\" > \\n < div className=\col\>\\n < JssImage field= { props.fields.Image } />\\n < /div>\\n < div className=\col\>\\n < JssRichText field= { props.fields.Body } />\\n < JssLink field= { props.fields.CTALink } />\\n < /div>\\n < /div>\\n < /div>\\n); \\n } \\n\\n return < RenderingDefaultComponent { ...props } />; \\n }; \\n\\n//any other variants will be added below\\n
    "@
    
    	# Define the JSON payload
    	$jsonPayload = @"
        {
          "contents": [
            {
              "parts": [
                {
                  "text": "$($prompt)"
                }
              ]
            }
          ],
          "generationConfig": {
        "temperature": 0.2,
        "topK": 1,
        "topP": 0.2,
        "stopSequences": []
      }
        }
    "@
    
    
    	# Define headers
    	$headers = @{
    		"Content-Type" = "application/json"
    	}
    
    	# Output the response
    	$response = Invoke-RestMethod -Uri $apiUrl -Method Post -Headers $headers -Body $jsonPayload
    
    	return $response.Candidates[0].content.parts[0].text
    
    }
    
    $datasourceTemplate = GetItemByPath ($rendering[$datasourceTemplateField])
    
    if ($datasourceTemplate) {
    	# Get all fields of the template
    	##$fields = ([Sitecore.Data.Items.TemplateItem]$datasourceTemplate).OwnFields
    	$allFields = GetAllCustomFields ($datasourceTemplate)
    
    	$promptFields = GetCommaSeparatedFields ($allFields)
    
    	$response = GetAIRepsonse ($promptFields)
    
    	DisplayDialog ($response)
    
    }
    else {
    	Show-Alert -Title "Datasource Template is not selected!"
    } 
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20240302T085432Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\Admin
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "38320bc6-0b8e-4c32-afa4-aeb7b7331aba"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\Admin
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20240302T205237Z
